{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"MyusersPage\",\n  data() {\n    return {\n      drivers: [],\n      showSuccessMessage: false,\n      // Array pour stocker les commandes\n      orders: []\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // Appeler la méthode pour récupérer les commandes au chargement du composant\n  },\n\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get('/delivry/get-delivery-drivers'); // Remplacez par l'URL correcte pour récupérer les livreurs\n        this.drivers = response.data.drivers;\n        const respons = await axios.get(`/get-orders?email=${driver.email}`); // Remplacez par l'URL correcte pour récupérer les livreurs\n        this.orders = respons.data.drivers; // Mettre à jour le tableau des livreurs avec les données récupérées\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AA6CA;AACA;EACAA;EACAC;IACA;MACAC;MACAC;MAAA;MACAC;IACA;EACA;EACAC;IACA;EACA;;EACAC;IACA;MACA;QACA;QACA;QACA;QACA;MACA;QACAC;MACA;IACA;EAEA;AACA","names":["name","data","drivers","showSuccessMessage","orders","mounted","methods","console"],"sourceRoot":"src/pages","sources":["delivryPage.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <h2 class=\"my-orders__heading\">Active</h2>\n      <div class=\"my-orders__content\">\n        <h3 class=\"my-orders__content-title\">Delivry</h3>\n        <div id=\"app\">\n        <table>\n          <thead>\n              <tr>\n                <th>User ID</th>\n                <th>First name</th>\n                 <th>Last name</th>\n                 <th>Email</th>\n                <th>Phone</th>\n                <th>Siret</th>\n                <th>Weight</th>\n                <th>Global Rate</th>\n              </tr>\n          </thead>\n          <tbody>\n            <tr v-if=\"drivers.length > 0\" v-for=\"(driver, index) in drivers\" :key=\"index\">\n                <template v-if=\"driver.active === 1\">\n              <td>{{driver._id}}</td>\n                <td>{{ driver.email }}</td>\n                <td>{{ driver.firstName }}</td>\n                <td>{{ driver.lastName }}</td>\n                <td>{{ driver.phoneNumber }}</td>\n                <td>{{ driver.deliveryService }}</td>\n                <td>{{ driver.poids }}</td>\n                <td>{{ orders.rate/orders.lenght }}</td>\n                </template>\n\n            </tr>\n            <tr v-if=\"drivers.length == 0\">\n                <td colspan=\"5\">No delivry available.</td>\n              </tr>\n          </tbody>\n        </table>\n    \n      </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  export default {\n    name: \"MyusersPage\",\n    data() {\n      return {\n        drivers: [] ,\n        showSuccessMessage: false,// Array pour stocker les commandes\n        orders: [] \n      };\n    },\n    mounted() {\n      this.fetchOrders(); // Appeler la méthode pour récupérer les commandes au chargement du composant\n    },\n    methods: {\n      async fetchOrders() {\n        try {\n          const response = await axios.get('/delivry/get-delivery-drivers'); // Remplacez par l'URL correcte pour récupérer les livreurs\n          this.drivers = response.data.drivers;\n          const respons = await axios.get(`/get-orders?email=${driver.email}`);// Remplacez par l'URL correcte pour récupérer les livreurs\n          this.orders = respons.data.drivers; // Mettre à jour le tableau des livreurs avec les données récupérées\n        } catch (error) {\n          console.error(error);\n        }\n      }, \n      \n    }\n  };\n  \n  \n  </script>\n  \n  <style lang=\"scss\">\n  .my-orders {\n    &__heading {\n      color: $color-dark;\n      font-size: 20px;\n      font-family: $base-font;\n      font-weight: 600;\n      line-height: 28px;\n      letter-spacing: 0.1px;\n      margin-bottom: 16px;\n    }\n  \n    &__content {\n      border: 1px solid $color-grey-lightest;\n      border-radius: 16px;\n      padding: 16px;\n      margin-bottom: 24px;\n    }\n  \n    &__content-title {\n      color: $color-dark;\n      font-family: $base-font;\n      font-weight: 700;\n      font-size: 18px;\n      line-height: 24px;\n      letter-spacing: 0.1px;\n      margin-bottom: 16px;\n    }\n  }\n  table , tr,td , th{\n    border: 1px solid black;\n    padding: 10px;\n  }\n  button.newItem {\n    padding: 5px;\n    margin: 14px 0 0 0;\n    font-weight: bold;\n    font-size: 16px;\n  }\n  </style>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}