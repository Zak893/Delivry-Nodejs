{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  name: \"AdminPage\",\n  data() {\n    return {\n      isLoading: false,\n      showPassword: false,\n      serverError: \"\",\n      serverSuccess: \"\",\n      formData: {\n        email: \"\",\n        password: \"\"\n      },\n      errors: {\n        email: \"\",\n        password: \"\"\n      },\n      selectedOption: \"Client\"\n    };\n  },\n  methods: {\n    ...mapActions({\n      loginAction: 'auth/admin'\n    }),\n    showPasswordClick() {\n      this.showPassword = !this.showPassword;\n    },\n    changeField(propertyName, value) {\n      if (this.errors[propertyName] !== \"\") {\n        this.errors[propertyName] = \"\";\n      }\n      this.formData[propertyName] = value;\n    },\n    async login() {\n      try {\n        if (this.selectedOption === \"Client\") {\n          const response = await axios.post('http://localhost:5000/user/login', {\n            email: this.formData.email,\n            password: this.formData.password\n          });\n          if (response.data.success) {\n            const userData = response.data.user;\n            localStorage.setItem('userEmail', this.formData.email);\n            localStorage.setItem('userFirst', userData.firstName);\n            localStorage.setItem('userLast', userData.lastName);\n            localStorage.setItem('userPhone', userData.phoneNumber);\n            localStorage.setItem('userType', 'User');\n            this.$router.push({\n              path: '/profile'\n            });\n          } else {\n            this.serverError = 'Invalid email or password';\n          }\n        } else {\n          const response = await axios.post('http://localhost:5000/admin/login', {\n            email: this.formData.email,\n            password: this.formData.password\n          });\n          if (response.data.success) {\n            const userData = response.data.user;\n            this.$router.push({\n              path: '/profile'\n            });\n          } else {\n            this.serverError = 'Invalid email or password';\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AA6DA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;QACAF;QACAC;MACA;MACAE;IACA;EACA;EACAC;IACA;MACAC;IACA;IACAC;MACA;IACA;IACAC;MACA;QACA;MACA;MACA;IACA;IACA;MACA;QACA;UACA;YACAP;YACAC;UACA;UACA;YACA;YACAO;YACAA;YACAA;YACAA;YACAA;YACA;cAAAC;YAAA;UACA;YACA;UACA;QAAA,OAEA;UACA;YACAT;YACAC;UACA;UACA;YACA;YACA;cAAAQ;YAAA;UACA;YACA;UACA;QAAA;MAEA;QACAC;MACA;IACA;EACA;AACA","names":["name","data","isLoading","showPassword","serverError","serverSuccess","formData","email","password","errors","selectedOption","methods","loginAction","showPasswordClick","changeField","localStorage","path","console"],"sourceRoot":"src/pages/Auth","sources":["Admin.vue"],"sourcesContent":["<template>\n  <div class=\"login\">\n    <h1 class=\"signUp__name\" style=\"display : flex;\">Login As \n <span\n   style=\" color: blue;\n    margin-left: 15px;\"\n      >\n         Admin\n      </span>\n</h1>\n  \n    <BaseAlert\n      v-if=\"!!serverError\"\n      class=\"login__alert\"\n      variant=\"danger\"\n      :message=\"serverError\"\n    />\n\n    <BaseAlert\n      v-if=\"!!serverSuccess\"\n      class=\"login__alert\"\n      variant=\"success\"\n      :message=\"serverSuccess\"\n    />\n    <!-- ========Base inputs========= -->\n    <BaseInput\n      label=\"Email\"\n      type=\"email\"\n      placeholder=\"name@example.com\"\n      :value=\"formData.email\"\n      :error=\"errors.email\"\n      @onInput=\"(value) => changeField('email', value)\"\n    />\n\n    <BaseInput\n      class=\"login__baseInput\"\n      label=\"Password\"\n      type=\"password\"\n      placeholder=\"min.8 characters\"\n      :value=\"formData.password\"\n      :showPassword=\"showPassword\"\n      :error=\"errors.password\"\n      @onPasswordToggle=\"showPasswordClick\"\n      @onInput=\"(value) => changeField('password', value)\"\n    />\n\n    <!-- ===========Base button========== -->\n    <BaseButton\n      variant=\"primary\"\n      class=\"login__baseBtn\"\n      @onClick=\"login\"\n      :loading=\"isLoading\"\n    >\n      Login\n    </BaseButton>\n\n  \n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex';\n\nexport default {\n  name: \"AdminPage\",\n  data() {\n    return {\n      isLoading: false,\n      showPassword: false,\n      serverError: \"\",\n      serverSuccess: \"\",\n      formData: {\n        email: \"\",\n        password: \"\",\n      },\n      errors: {\n        email: \"\",\n        password: \"\",\n      },\n      selectedOption: \"Client\"\n    };\n  },\n  methods: {\n    ...mapActions({\n      loginAction: 'auth/admin'\n    }),\n    showPasswordClick() {\n      this.showPassword = !this.showPassword;\n    },\n    changeField(propertyName, value) {\n      if (this.errors[propertyName] !== \"\") {\n        this.errors[propertyName] = \"\";\n      }\n      this.formData[propertyName] = value;\n    },\n    async login() {\n      try {\n        if (this.selectedOption === \"Client\") {\n          const response = await axios.post('http://localhost:5000/user/login', {\n          email: this.formData.email,\n          password: this.formData.password,\n        });      \n        if (response.data.success) {\n          const userData = response.data.user;\n          localStorage.setItem('userEmail', this.formData.email);\n          localStorage.setItem('userFirst', userData.firstName);\n          localStorage.setItem('userLast', userData.lastName);\n          localStorage.setItem('userPhone', userData.phoneNumber);\n          localStorage.setItem('userType', 'User');\n          this.$router.push({ path: '/profile' });\n        } else {\n          this.serverError = 'Invalid email or password';\n        }  }\n\n        else {\n          const response = await axios.post('http://localhost:5000/admin/login', {\n          email: this.formData.email,\n          password: this.formData.password,\n        });   \n        if (response.data.success) {\n          const userData = response.data.user;\n          this.$router.push({ path: '/profile' });\n        } else {\n          this.serverError = 'Invalid email or password';\n        }     }\n\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n/* FORM*/\n.login {\n  width: 50%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n\n  &__alert {\n    margin-bottom: 16px;\n  }\n\n  &__name {\n    color: $color-dark;\n    font-size: 32px;\n    line-height: 82px;\n    font-family: $base-font;\n    font-weight: 700;\n    letter-spacing: 0.1px;\n  }\n  &__text {\n    display: none;\n  }\n\n  &__baseInput {\n    margin-bottom: 28px !important;\n  }\n\n  &__baseCheckbox {\n    margin-bottom: 40px;\n  }\n\n  &__baseBtn {\n    width: 100%;\n    margin-bottom: 35px;\n  }\n\n  &__forgotLink {\n    color: $color-primary;\n    display: block;\n    font-family: $base-font;\n    font-weight: 700;\n    font-size: 14px;\n    line-height: 20px;\n    text-align: center;\n    margin-bottom: 110px;\n    &:hover {\n      color: $color-primary;\n    }\n  }\n\n  &__subText {\n    color: $color-dark;\n    font-family: $base-font;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 20px;\n    text-align: center;\n  }\n\n  &__link {\n    font-size: 14px;\n    color: $color-primary;\n  }\n}\n\n@media screen and (max-width: 768px) {\n  .login {\n    transform: translateX(-50%) translateY(-40%);\n    width: 95%;\n\n    &__name {\n      font-size: 60px;\n    }\n\n    &__text {\n      display: block;\n      color: $color-grey-dark;\n      font-family: $base-font;\n      font-weight: 400;\n      font-size: 14px;\n      margin-bottom: 45px;\n      line-height: 20px;\n      letter-spacing: 0.1px;\n    }\n\n    &__link {\n      padding-bottom: 32px;\n    }\n  }\n  .selected-option {\n  /* Styles for selected option */\n  background-color: cornflowerblue;; /* Change to the desired background color */\n  color: white; /* Change to the desired text color */\n}\n\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}