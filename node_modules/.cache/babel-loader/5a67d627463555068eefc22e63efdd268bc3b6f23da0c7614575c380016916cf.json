{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"MyOrdersPage\",\n  data() {\n    return {\n      orders: [] // Array pour stocker les commandes\n    };\n  },\n\n  mounted() {\n    this.fetchOrders(); // Appeler la méthode pour récupérer les commandes au chargement du composant\n  },\n\n  methods: {\n    async fetchOrders() {\n      const userEmail = localStorage.getItem('userEmail'); // Récupérer l'e-mail de l'utilisateur depuis localStorage\n      try {\n        const response = await axios.get(`/get-All-orders`); // Remplacez par l'URL correcte pour récupérer les commandes\n        console.log(response.data.orders);\n        this.orders = response.data.orders; // Mettre à jour le tableau des commandes avec les données récupérées\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAwCA;AACA;EACAA;EACAC;IACA;MACAC;IACA;EACA;;EACAC;IACA;EACA;;EACAC;IACA;MACA;MACA;QAEA;QACAC;QACA;MACA;QACAA;MACA;IACA;EACA;AACA","names":["name","data","orders","mounted","methods","console"],"sourceRoot":"src/pages","sources":["DelivryOrders.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n      <h2 class=\"my-orders__heading\">My Orders</h2>\n  \n      <div class=\"my-orders__content\">\n        <h3 class=\"my-orders__content-title\">Orders list</h3>\n        <div id=\"app\">\n        <table>\n          <thead>\n              <tr>\n                <th>Order ID</th>\n                <th>Weight</th>\n                 <th>Delivery address</th>\n                 <th>Client name</th>\n                <th>Take</th>\n              </tr>\n          </thead>\n          <tbody>\n            <tr v-if=\"orders.length > 0\" v-for=\"(order, index) in orders\" :key=\"index\">\n              <td>{{index + 1}}</td>\n                <td>{{ order.poids }}</td>\n                <td>{{ order.adress+' '+order.complement+' '+order.postal }}</td>\n                <td>kalalal prend votre commande</td>\n              <td><button>\n                 Save\n              </button></td>\n  \n            </tr>\n            <tr v-if=\"orders.length == 0\">\n                <td colspan=\"5\">No orders available.</td>\n              </tr>\n          </tbody>\n        </table>\n    \n      </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  export default {\n    name: \"MyOrdersPage\",\n    data() {\n      return {\n        orders: [] // Array pour stocker les commandes\n      };\n    },\n    mounted() {\n      this.fetchOrders(); // Appeler la méthode pour récupérer les commandes au chargement du composant\n    },\n    methods: {\n      async fetchOrders() {\n        const userEmail = localStorage.getItem('userEmail'); // Récupérer l'e-mail de l'utilisateur depuis localStorage\n        try {\n          \n          const response = await axios.get(`/get-All-orders`); // Remplacez par l'URL correcte pour récupérer les commandes\n          console.log(response.data.orders)\n          this.orders = response.data.orders; // Mettre à jour le tableau des commandes avec les données récupérées\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  };\n  \n  \n  </script>\n  \n  <style lang=\"scss\">\n  .my-orders {\n    &__heading {\n      color: $color-dark;\n      font-size: 20px;\n      font-family: $base-font;\n      font-weight: 600;\n      line-height: 28px;\n      letter-spacing: 0.1px;\n      margin-bottom: 16px;\n    }\n  \n    &__content {\n      border: 1px solid $color-grey-lightest;\n      border-radius: 16px;\n      padding: 16px;\n      margin-bottom: 24px;\n    }\n  \n    &__content-title {\n      color: $color-dark;\n      font-family: $base-font;\n      font-weight: 700;\n      font-size: 18px;\n      line-height: 24px;\n      letter-spacing: 0.1px;\n      margin-bottom: 16px;\n    }\n  }\n  table , tr,td , th{\n    border: 1px solid black;\n    padding: 10px;\n  }\n  button.newItem {\n    padding: 5px;\n    margin: 14px 0 0 0;\n    font-weight: bold;\n    font-size: 16px;\n  }\n  </style>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}