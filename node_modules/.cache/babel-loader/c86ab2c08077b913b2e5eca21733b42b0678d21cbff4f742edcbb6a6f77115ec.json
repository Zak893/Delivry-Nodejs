{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"MyOrdersPage\",\n  data() {\n    return {\n      drivers: [] // Array pour stocker les commandes\n    };\n  },\n\n  mounted() {\n    this.fetchOrders(); // Appeler la méthode pour récupérer les commandes au chargement du composant\n  },\n\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get('/delivry/get-delivery-drivers'); // Remplacez par l'URL correcte pour récupérer les livreurs\n        this.drivers = response.data.drivers;\n        console.log(this.drivers); // Mettre à jour le tableau des livreurs avec les données récupérées\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async validateDriver(driverId, activeStatus) {\n      try {\n        // Inverser l'état actif\n        const newActiveStatus = activeStatus === 0 ? 1 : 0;\n        const response = await axios.put('/delivry/update-driver-status', {\n          driverId,\n          active: newActiveStatus\n        });\n\n        // Mettre à jour le statut actif dans la liste des pilotes\n        const updatedDriverIndex = this.drivers.findIndex(driver => driver._id === driverId);\n        if (updatedDriverIndex !== -1) {\n          this.drivers[updatedDriverIndex].active = newActiveStatus;\n        }\n        console.log(`Driver with ID ${driverId} status has been updated.`);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAgDA;AACA;EACAA;EACAC;IACA;MACAC;IACA;EACA;;EACAC;IACA;EACA;;EACAC;IACA;MACA;QACA;QACA;QACAC;MACA;QACAA;MACA;IACA;IACA;MACA;QACA;QACA;QAEA;UACAC;UACAC;QACA;;QAEA;QACA;QACA;UACA;QACA;QAEAF;MACA;QACAA;MACA;IACA;EAEA;AACA","names":["name","data","drivers","mounted","methods","console","driverId","active"],"sourceRoot":"src/pages","sources":["validatePage.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h2 class=\"my-orders__heading\">Validate</h2>\n\n    <div class=\"my-orders__content\">\n      <h3 class=\"my-orders__content-title\">Delivry</h3>\n      <div id=\"app\">\n      <table>\n        <thead>\n            <tr>\n              <th>Delivry ID</th>\n              <th>First name</th>\n               <th>Last name</th>\n               <th>Siret</th>\n              <th>Weight</th>\n            </tr>\n        </thead>\n        <tbody>\n          <tr v-if=\"drivers.length > 0\" v-for=\"(driver, index) in drivers\" :key=\"index\">\n            <template v-if=\"driver.active === 0\">\n            <td>{{driver._id}}</td>\n              <td>{{ driver.deliveryService }}</td>\n              <td>{{ driver.firstName }}</td>\n              <td>{{ driver.lastName }}</td>\n              <td>{{ driver.poids }}</td>\n            <td>\n              <button\n                  type=\"button\"\n                  @click=\"validateDriver(driver._id, driver.active)\"\n                  :disabled=\"driver.active !== 0\"\n                >\n                  Activate\n                </button>\n            </td>\n          </template>\n          </tr>\n          <tr v-if=\"drivers.length == 0\">\n              <td colspan=\"5\">No orders available.</td>\n            </tr>\n        </tbody>\n      </table>\n  \n    </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nexport default {\n  name: \"MyOrdersPage\",\n  data() {\n    return {\n      drivers: [] // Array pour stocker les commandes\n    };\n  },\n  mounted() {\n    this.fetchOrders(); // Appeler la méthode pour récupérer les commandes au chargement du composant\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get('/delivry/get-delivery-drivers'); // Remplacez par l'URL correcte pour récupérer les livreurs\n        this.drivers = response.data.drivers;\n        console.log(this.drivers) // Mettre à jour le tableau des livreurs avec les données récupérées\n      } catch (error) {\n        console.error(error);\n      }\n    }, \n    async validateDriver(driverId, activeStatus) {\n      try {\n        // Inverser l'état actif\n        const newActiveStatus = activeStatus === 0 ? 1 : 0;\n        \n        const response = await axios.put('/delivry/update-driver-status', {\n          driverId,\n          active: newActiveStatus\n        });\n        \n        // Mettre à jour le statut actif dans la liste des pilotes\n        const updatedDriverIndex = this.drivers.findIndex(driver => driver._id === driverId);\n        if (updatedDriverIndex !== -1) {\n          this.drivers[updatedDriverIndex].active = newActiveStatus;\n        }\n\n        console.log(`Driver with ID ${driverId} status has been updated.`);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    \n  }\n};\n\n\n</script>\n\n<style lang=\"scss\">\n.my-orders {\n  &__heading {\n    color: $color-dark;\n    font-size: 20px;\n    font-family: $base-font;\n    font-weight: 600;\n    line-height: 28px;\n    letter-spacing: 0.1px;\n    margin-bottom: 16px;\n  }\n\n  &__content {\n    border: 1px solid $color-grey-lightest;\n    border-radius: 16px;\n    padding: 16px;\n    margin-bottom: 24px;\n  }\n\n  &__content-title {\n    color: $color-dark;\n    font-family: $base-font;\n    font-weight: 700;\n    font-size: 18px;\n    line-height: 24px;\n    letter-spacing: 0.1px;\n    margin-bottom: 16px;\n  }\n}\ntable , tr,td , th{\n  border: 1px solid black;\n  padding: 10px;\n}\nbutton.newItem {\n  padding: 5px;\n  margin: 14px 0 0 0;\n  font-weight: bold;\n  font-size: 16px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}